---
# tasks file for kubernetes worker
#Configures the docker repository separately due to 
- name: Configure yum for docker
  yum_repository:
    name: "docker_repo"
    description: Yum repo for docker
    baseurl: https://download.docker.com/linux/centos/8/x86_64/stable/
    gpgcheck: no

# installs the right version for docker for RHEL
- name: Install docker on RHEL
  package:
    name: "docker-ce-20.10.19-3.el8.x86_64"
    state: present
  register: dockerinstall

#Python installation
- name: Install Python
  package:
    name: python3
    state: present

#Docker SDK for python
- name: Install Docker sdk for python
  pip:
    name: docker

#Creates the docker directory
- name: Create /etc/docker directory
  file:
    path: /etc/docker
    state: directory

# Updates the driver
- name: Update docker driver to systemd
  copy:
    src: daemon.json
    dest: /etc/docker/daemon.json

#Initiates docker
- name: Start docker
  service:
    name: docker
    state: started
    enabled: yes

#Configuring kubernetes on worker node
- name: Configure yum repo for kubernetes
  yum_repository:
    name: kubernetes
    description: Yum repo for Kubernetes
    baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch
    gpgcheck: no
  register: kuberepo

# Installs the packages from vars/
- name: Install required packages
  yum:
    name: "{{ item }}"
    state: present
  loop: "{{ pkgs }}"

# Fix containerd in case it wasn't installed
- name: fix containerd
  shell: containerd config default | sudo tee /etc/containerd/config.toml

#Enable kubelet
- name: Start and enable kubelet
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop: "{{ services }}"
  register: svc_start

#Update the kubernetes config IP table for the workernode
- name: Updating IP tables on worker node
  copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1

- name: Load settings from all system configuration files
  shell: sysctl --system

- name: restart containerd
  shell: sudo systemctl restart containerd
  

# Create flannel CNI directory
- name: Create /etc/cni/net.d/10-flannel directory
  file:
    path: /run/flannel
    state: directory  

# Install flannel to make sure worker nodes become ready
- name: Create subnet.env file
  copy:
    dest: /run/flannel/subnet.env
    content: |
      FLANNEL_NETWORK=10.244.0.0/16
      FLANNEL_SUBNET=10.244.0.1/24
      FLANNEL_MTU=1450
      FLANNEL_IPMASQ=true   

# Joining the master node through the token
- name: Joining the master node
  command: "{{ hostvars[groups['Master_Node'][0]]['token']['stdout'] }}"

